<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace pocketmine\entity;

use pocketmine\item\Item;
use pocketmine\item\ItemFactory;
use function mt_rand;
use pocketmine\network\mcpe\protocol\EntityEventPacket;
use pocketmine\Server;
use pocketmine\utils\Random;

class Zombie extends Monster{
	public const NETWORK_ID = self::ZOMBIE;

	public $width = 0.6;
	public $height = 1.8;

	public function getName() : string{
		return "Zombie";
	}

	protected function onDeathUpdate(int $tickDiff): bool
	{
		return parent::onDeathUpdate($tickDiff); // TODO: Change the autogenerated stub
	}


	public function entityBaseTick(int $tickDiff = 1) : bool{

		 $movex = false;
		$movez = false;

		if(!$this->isOnFire() and $this->level->getTime() > 0 and $this->level->getTime() < 13000){
			if(!$this->isUnderwater() and $this->level->getBlockSkyLightAt((int)$this->x,(int)$this->y+2,(int)$this->z) > 0){
				$this->setHealth($this->getHealth()-0.1);
				$this->setOnFire(5);
			}
		}


		$this->setImmobile(false);

		mt_srand( $this->getID()+$this->getFloorX() + $this->getFloorZ() + random_int(0,100) );
		if(mt_rand(0,20)  === 9){
			if(random_int(0,10) == 2){

					$movex = true;


			$this->yaw += (mt_rand(0,50)) * -1;
			}else{
				$movex = false;
				$movez = false;
				$this->yaw += (mt_rand(0,50));
			}
		}
		if(random_int(0,10) == 2){
			$movez = true;
		}
		if($movex){
			$this->move(1,0,0);
		}
		if($movez){
			$this->move(0,0,1);
		}



		//$this->pitch = (-atan2($f, $this->motion->y) * 180 / M_PI);
		$hasUpdate = parent::entityBaseTick($tickDiff);
		return $hasUpdate;
	}

	public function getDrops() : array{
		$soos = 3;
		if((-atan2(mt_rand(0,10), $this->motion->y) * 180 / M_PI) == 180){
			$soos = 1000;
		}

		$drops = [
			ItemFactory::get(Item::ROTTEN_FLESH, 0, mt_rand(0, $soos))
		];

		if(mt_rand(0, 199) < 5){
			switch(mt_rand(0, 2)){
				case 0:
					$drops[] = ItemFactory::get(Item::IRON_INGOT, 0, 1);
					break;
				case 1:
					$drops[] = ItemFactory::get(Item::CARROT, 0, 1);
					break;
				case 2:
					$drops[] = ItemFactory::get(Item::POTATO, 0, 1);
					break;
			}
		}

		return $drops;
	}

	public function getXpDropAmount() : int{
		//TODO: check for equipment and whether it's a baby
		return 5;
	}
}
